# scripts/01_extraccion_datos.R
# ----------------------------------------
# Lee todos los archivos raw (CSV, XLS, XLSX) y guarda un CSV combinado
# 1) Librerías
library(here)
library(tidyverse)
library(readxl)
library(janitor)
# 2) Rutas
raw_path   <- here("raw")
input_path <- here("input")
# 3) Crear carpeta input/ si no existe
if (!dir.exists(input_path)) dir.create(input_path)
# 4) Listar archivos
archivos <- list.files(
path       = raw_path,
pattern    = "\\.(csv|xls|xlsx)$",
full.names = TRUE
)
# 5) Función de lectura
read_file <- function(fichero) {
ext <- tolower(tools::file_ext(fichero))
message("Procesando: ", basename(fichero))
df <- switch(
ext,
"csv"  = read_delim(
fichero,
delim          = ";",
quote          = "",
trim_ws        = TRUE,
show_col_types = FALSE,
locale         = locale(decimal_mark = ".", grouping_mark = ",")
),
"xls"  = read_excel(fichero),
"xlsx" = read_excel(fichero),
stop("Extensión no soportada: ", ext)
)
df %>%
clean_names() %>%
mutate(across(everything(), ~ str_remove_all(., '^"|"$')))
}
# 6) Leer y combinar
datos_raw <- map_dfr(archivos, read_file)
# 7) Guardar
output_raw <- file.path(input_path, "datos_raw.csv")
write_csv(datos_raw, output_raw)
message("datos_raw guardado en: ", output_raw)
View(datos_raw)
# 1) Librerías
library(here)
# scripts/02_limpieza_de_datos.R
# ----------------------------------------
# Toma datos_raw.csv y genera datos_subte_completo.csv con tipos correctos
# 1) Librerías
library(here)
library(tidyverse)
library(lubridate)
# 2) Leer bruto
raw_file    <- here("input", "datos_raw.csv")
datos_raw   <- read_csv(raw_file, show_col_types = FALSE)
# 3) Renombrar columnas clave
datos_subte <- datos_raw %>%
rename_with(tolower) %>%
rename(
fecha      = starts_with("fecha"),
desde      = starts_with("desde"),
hasta      = starts_with("hasta"),
linea      = starts_with("linea"),
molinete   = starts_with("molinete"),
estacion   = starts_with("estacion"),
pax_pagos  = contains("pax_pagos"),
pax_pases  = contains("pax_pases"),
pax_franq  = contains("pax_franq"),
pax_total  = contains("pax_total")
) %>%
select(fecha, desde, hasta, linea, molinete, estacion,
pax_pagos, pax_pases, pax_franq, pax_total)
# 4) Convertir tipos
datos_subte <- datos_subte %>%
mutate(
fecha     = dmy(fecha),
desde     = hms(desde),
hasta     = hms(hasta),
across(starts_with("pax_"), as.numeric)
)
# 5) Verificar
print(colSums(is.na(datos_subte)))
glimpse(datos_subte)
# 6) Guardar limpio
clean_file <- here("input", "datos_subte_completo.csv")
write_csv(datos_subte, clean_file)
message("datos_subte_completo guardado en: ", clean_file)
View(datos_subte)
# scripts/03_estadisticas_descriptivas.R
# ----------------------------------------
# Cálculo de tablas resumen para usar en las visualizaciones
# 1) Librerías y rutas
library(here)
library(tidyverse)
library(lubridate)
# 2) Asegurar carpeta output/ existe
out <- here("output")
if (!dir.exists(out)) dir.create(out)
# 3) Leer datos limpios
datos_subte <- read_csv(
here("input", "datos_subte_completo.csv"),
show_col_types = FALSE
) %>%
rename_with(tolower)
# 4) Variables derivadas
datos_subte <- datos_subte %>%
mutate(
weekday    = wday(fecha, label = TRUE, abbr = TRUE, week_start = 1),
is_weekend = weekday %in% c("sáb", "dom"),
hour       = parse_number(desde)  # extrae la hora
)
# 5) Serie diaria (total, media, mediana, desv, cuantiles)
diarios <- datos_subte %>%
group_by(fecha) %>%
summarise(
total_viajes   = sum(pax_total, na.rm = TRUE),
media_viajes   = mean(pax_total, na.rm = TRUE),
mediana_viajes = median(pax_total, na.rm = TRUE),
sd_viajes      = sd(pax_total, na.rm = TRUE),
q25_viajes     = quantile(pax_total, .25, na.rm = TRUE),
q75_viajes     = quantile(pax_total, .75, na.rm = TRUE),
n_obs          = n(),
.groups        = "drop"
)
write_csv(diarios, here(out, "03_viajes_diarios.csv"))
# 6) Comparativo fin de semana vs hábiles
semana <- datos_subte %>%
group_by(is_weekend) %>%
summarise(
total_viajes   = sum(pax_total),
media_viajes   = mean(pax_total),
mediana_viajes = median(pax_total),
sd_viajes      = sd(pax_total),
.groups        = "drop"
)
write_csv(semana, here(out, "03_viajes_semana_vs_findesemana.csv"))
# 7) Resumen por línea
linea <- datos_subte %>%
group_by(linea) %>%
summarise(
total_viajes   = sum(pax_total),
media_viajes   = mean(pax_total),
mediana_viajes = median(pax_total),
sd_viajes      = sd(pax_total),
.groups        = "drop"
) %>%
arrange(desc(total_viajes))
write_csv(linea, here(out, "03_viajes_por_linea.csv"))
# 8) Ranking de estaciones
estacion <- datos_subte %>%
group_by(estacion) %>%
summarise(
total_viajes   = sum(pax_total),
media_viajes   = mean(pax_total),
.groups        = "drop"
) %>%
arrange(desc(total_viajes))
write_csv(estacion, here(out, "03_ranking_estaciones.csv"))
# 9) Perfil horario global
horario <- datos_subte %>%
group_by(hour) %>%
summarise(
total_viajes = sum(pax_total),
media_viajes = mean(pax_total),
.groups      = "drop"
)
write_csv(horario, here(out, "03_perfil_horario_global.csv"))
# 10) Perfil horario por línea
horario_linea <- datos_subte %>%
group_by(linea, hour) %>%
summarise(
total_viajes = sum(pax_total),
.groups      = "drop"
)
write_csv(horario_linea, here(out, "03_perfil_horario_por_linea.csv"))
# 11) Estadísticas generales de la serie diaria
stats_general <- diarios %>%
summarise(
min_viajes   = min(total_viajes),
max_viajes   = max(total_viajes),
avg_viajes   = mean(total_viajes),
med_viajes   = median(total_viajes),
sd_viajes    = sd(total_viajes)
)
write_lines(
paste0(
"Mínimo diario: ", stats_general$min_viajes, "\n",
"Máximo diario: ", stats_general$max_viajes, "\n",
"Media diaria: ", round(stats_general$avg_viajes,1), "\n",
"Mediana diaria: ", stats_general$med_viajes, "\n",
"Desv. est. diaria: ", round(stats_general$sd_viajes,1), "\n"
),
here(out, "03_estadisticas_generales.txt")
)
message("03_estadisticas_descriptivas.R completado: se guardaron ",
"diarios, comparativo semana, línea, estaciones y perfiles horarios.")
View(diarios)
View(stats_general)
View(stats_general)
View(semana)
View(linea)
# scripts/04_visualizaciones.R
# ----------------------------------------
# Genera y guarda todos los gráficos descriptivos corregidos
# 1) Librerías y rutas
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
out <- here("output")
if (!dir.exists(out)) dir.create(out)
# 2) Leer datos limpios y garantizar POSIXct
datos_subte <- read_csv(
here("input", "datos_subte_completo.csv"),
show_col_types = FALSE
) %>%
mutate(fecha = as_datetime(fecha))
# 3) Serie diaria con banda de cuartiles ------------------------------------
diarios <- read_csv(
here(out, "03_viajes_diarios.csv"),
show_col_types = FALSE
)
p1 <- ggplot(diarios, aes(x = fecha)) +
geom_ribbon(aes(ymin = q25_viajes, ymax = q75_viajes),
fill = "lightblue", alpha = 0.4) +
geom_line(aes(y = total_viajes), color = "steelblue") +
labs(
title = "Serie diaria de viajes (2024) con banda de cuartiles",
x     = "Fecha",
y     = "Total viajes"
) +
scale_y_continuous(labels = comma) +
theme_minimal()
ggsave(
filename = "04_serie_diaria_cuartiles.png",
plot     = p1,
path     = out,
width    = 8,
height   = 4,
dpi      = 300
)
# 4) Comparativo fin de semana vs. hábiles ----------------------------------
# 4) Comparativo: Lunes–Viernes vs Sábado–Domingo
semana2 <- datos_subte %>%
mutate(
dia_semana = wday(fecha, week_start = 1),            # 1 = lunes ... 7 = domingo
tipo       = if_else(dia_semana <= 5,
"Lunes–Viernes",
"Sábado–Domingo")
) %>%
group_by(tipo) %>%
summarise(
total_viajes = sum(pax_total, na.rm = TRUE),
.groups      = "drop"
)
p2 <- ggplot(semana2, aes(x = tipo, y = total_viajes, fill = tipo)) +
geom_col(width = 0.5, show.legend = FALSE) +
scale_y_continuous(labels = comma) +
labs(
title = "Comparativo: Lunes–Viernes vs Sábado–Domingo",
x     = "",
y     = "Total viajes (2024)"
) +
theme_minimal()
ggsave(
filename = "04_comparativo_semana.png",
plot     = p2,
path     = out,
width    = 6,
height   = 4,
dpi      = 300
)
# 5) Barras: viajes por línea -----------------------------------------------
linea <- read_csv(
here(out, "03_viajes_por_linea.csv"),
show_col_types = FALSE
)
p3 <- ggplot(linea, aes(x = fct_reorder(linea, total_viajes), y = total_viajes)) +
geom_col(fill = "coral") +
coord_flip() +
labs(
title = "Total de viajes por línea (2024)",
x     = "Línea",
y     = "Total viajes"
) +
scale_y_continuous(labels = comma) +
theme_minimal()
ggsave(
filename = "04_viajes_por_linea.png",
plot     = p3,
path     = out,
width    = 6,
height   = 5,
dpi      = 300
)
# 6) Top 10 estaciones más concurridas --------------------------------------
estacion <- read_csv(
here(out, "03_ranking_estaciones.csv"),
show_col_types = FALSE
) %>%
slice_max(total_viajes, n = 10)
p4 <- ggplot(estacion, aes(x = fct_reorder(estacion, total_viajes), y = total_viajes)) +
geom_col(fill = "darkgreen") +
coord_flip() +
labs(
title = "Top 10 estaciones por total de viajes (2024)",
x     = "Estación",
y     = "Total viajes"
) +
scale_y_continuous(labels = comma) +
theme_minimal()
ggsave(
filename = "04_top10_estaciones.png",
plot     = p4,
path     = out,
width    = 6,
height   = 5,
dpi      = 300
)
# 7) Perfil horario global (horas operativas 5–23) --------------------------
perfil_global <- datos_subte %>%
mutate(
datetime = fecha + as.duration(desde),
hour     = hour(datetime)
) %>%
group_by(hour) %>%
summarise(total_viajes = sum(pax_total, na.rm = TRUE), .groups = "drop") %>%
filter(hour >= 5, hour <= 23)
p5 <- ggplot(perfil_global, aes(x = hour, y = total_viajes)) +
geom_line(color = "purple", group = 1) +
scale_x_continuous(breaks = 5:23, limits = c(5, 23)) +
scale_y_continuous(labels = comma) +
labs(
title = "Perfil horario global de viajes (2024)\nHoras operativas 5–23",
x     = "Hora del día",
y     = "Total viajes"
) +
theme_minimal()
ggsave(
filename = "04_perfil_horario_global.png",
plot     = p5,
path     = out,
width    = 8,
height   = 4,
dpi      = 300
)
# 8) Heatmap por línea y hora (horas 5–23) ----------------------------------
perfil_linea_hora <- datos_subte %>%
mutate(
datetime = fecha + as.duration(desde),
hour     = hour(datetime),
linea    = factor(linea)
) %>%
filter(hour >= 5, hour <= 23) %>%
group_by(linea, hour) %>%
summarise(total_viajes = sum(pax_total, na.rm = TRUE), .groups = "drop")
p6 <- ggplot(perfil_linea_hora, aes(x = hour, y = linea, fill = total_viajes)) +
geom_tile() +
scale_x_continuous(breaks = 5:23, limits = c(5, 23)) +
scale_fill_viridis_c(option = "C", labels = comma) +
labs(
title = "Heatmap de viajes por hora y línea (horas operativas 5–23)",
x     = "Hora del día",
y     = "Línea",
fill  = "Total viajes"
) +
theme_minimal()
ggsave(
filename = "04_heatmap_linea_hora.png",
plot     = p6,
path     = out,
width    = 8,
height   = 5,
dpi      = 300
)
message("04_visualizaciones.R completado: todos los gráficos guardados en output/")
View(p1)
View(p6)
View(p6)
View(datos_subte)
